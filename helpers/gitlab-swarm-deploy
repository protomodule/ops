#!/usr/bin/env bash

#       ___ _ _   _         _    
#      / __(_) |_| |   __ _| |__ 
#     | (_ | |  _| |__/ _` | '_ \
#      \___|_|\__|____\__,_|_.__/
#
#   D e p l o y m e n t   H e l p e r

# Prepare shell for script execution
set -Eeo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT
[[ "$0" != "$BASH_SOURCE" ]] && EXIT=return || EXIT=exit
cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m\033[1m' GREEN='\033[0;32m\033[1m' ORANGE='\033[0;33m\033[1m' BLUE='\033[0;34m\033[1m' PURPLE='\033[0;35m\033[1m' CYAN='\033[0;36m\033[1m' YELLOW='\033[1;33m\033[1m'
    # Highlight            Warning                  Green / everything is ok     No Color (same as no format)
    HL='\033[0;34m\033[1m' WARN='\033[0;31m\033[1m' OK='\033[0;32m\033[1m'       NC='\033[0m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    HL='' WARN='' OK='' NC=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

has_param() {
    local term="$1"
    shift
    for arg; do
        if [[ $arg == "$term" ]]; then
            return 0
        fi
    done
    return 1
}

setup_colors

# Validate GitLab authentication
if [ -z "$GITLAB_TOKEN" ] && [ -z "$CI_JOB_TOKEN" ]; then
  msg "🛑  ${RED}GITLAB_TOKEN$NC nor ${RED}CI_JOB_TOKEN$NC is not set as an environment variable!"
  exit 98
fi

if [ -f "./deployment/.env" ]; then
  if has_param '-d' "$@"; then
    msg "🗑️   Deployment .env exists: ${RED}deleting existing file ...$NC"
  else
    msg "🛑  Can not proceed: ${RED}.env file already exists.$NC Aborting!"
    exit 99
  fi
fi

REPO=$(git config --get remote.origin.url | sed 's/^.*\@gitlab.com[\/\:]\(.*\)\.git$/\1/g')
ENVIRONMENT=${1:-develop}
ENVIRONMENT_PREFIX=$(echo "$ENVIRONMENT" | tr [:lower:] [:upper:])
msg "🚀  Deploying $HL$REPO$NC to $YELLOW$ENVIRONMENT$NC environment"

# Retrieve variables from GitLab via API
if [ ! -z "$GITLAB_TOKEN" ]; then
  msg "🐙  Retrieving variables from GitLab ..."
  VARIABLES=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "https://gitlab.com/api/v4/projects/$(echo "$REPO" | tr -d '\n' | jq -sRr '@uri')/variables?per_page=100")
  echo "$VARIABLES" | jq -r ".[] | select(.key == \"${ENVIRONMENT_PREFIX}_DEPLOYMENT_VARS\").value" > ./deployment/.env

  # Loading swarm configuration
  REPOSITORY_BASE=$(echo "$VARIABLES" | jq -r ".[] | select(.key == \"REPOSITORY_BASE\").value")
  REPOSITORY_URL=$(echo "$VARIABLES" | jq -r ".[] | select(.key == \"REPOSITORY\").value")

  # Loading AWS related variables
  msg "🔑  Configuring AWS (if necessary) ..."
  export AWS_ACCESS_KEY_ID=$(echo "$VARIABLES" | jq -r ".[] | select(.key == \"AWS_ACCESS_KEY_ID\").value")
  export AWS_DEFAULT_REGION=$(echo "$VARIABLES" | jq -r ".[] | select(.key == \"AWS_DEFAULT_REGION\").value")
  export AWS_SECRET_ACCESS_KEY=$(echo "$VARIABLES" | jq -r ".[] | select(.key == \"AWS_SECRET_ACCESS_KEY\").value")
  export ECR_REGISTRY=$(echo "$VARIABLES" | jq -r ".[] | select(.key == \"ECR_REGISTRY\").value")
  
  msg "🔧  Parsing Swarm config ..."
  export SWARM_CONFIG=$(echo "$VARIABLES" | jq -r ".[] | select(.key == \"${ENVIRONMENT_PREFIX}_SWARM_CONFIG\").value")
fi

# Use local veriables from GitLab
if [ ! -z "$CI_JOB_TOKEN" ]; then
  msg "👷  Retrieving variables from deployment vars ..."
  eval "echo \"\$${ENVIRONMENT_PREFIX}_DEPLOYMENT_VARS\"" > ./deployment/.env

  msg "🔧  Parsing Swarm config ..."
  eval export SWARM_CONFIG=\$${ENVIRONMENT_PREFIX}_SWARM_CONFIG
fi

if [ ! -f ./deployment/.env ]; then
  msg "💥  Could not generate ${RED}.env$NC file!"
  exit 97
fi

# Setting repository
export REPOSITORY=${REPOSITORY_URL:-$REPOSITORY_BASE}

# Run deployment script
msg "💫  Calling deployment script"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/protomodule/ops/main/bin/deploy)"

msg "🧼  Cleaning up"
rm -f "./deployment/.env"
