#!/usr/bin/env bash

#   ______           _             
#   |  _  \         | |            
#   | | | |___ _ __ | | ___  _   _ 
#   | | | / _ \ '_ \| |/ _ \| | | |
#   | |/ /  __/ |_) | | (_) | |_| |
#   |___/ \___| .__/|_|\___/ \__, |
#             | |             __/ |
#             |_|            |___/       
#                                                     
#   f o r   D o c k e r   S w a r m

# Usage: ./deploy [$(pwd)] [swarm.yml]

# Prepare shell for script execution
set -Eeo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT
[[ "$0" != "$BASH_SOURCE" ]] && EXIT=return || EXIT=exit
cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m\033[1m' GREEN='\033[0;32m\033[1m' ORANGE='\033[0;33m\033[1m' BLUE='\033[0;34m\033[1m' PURPLE='\033[0;35m\033[1m' CYAN='\033[0;36m\033[1m' YELLOW='\033[1;33m\033[1m'
    # Highlight            Warning                  Green / everything is ok     No Color (same as no format)
    HL='\033[0;34m\033[1m' WARN='\033[0;31m\033[1m' OK='\033[0;32m\033[1m'       NC='\033[0m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    HL='' WARN='' OK='' NC=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

setup_colors

# Set working directory
WORKING_DIR=${1:-$(pwd)}
msg "📂  Working from: $HL$WORKING_DIR$NC"

# Ensure swarm config is set
if [ -z "$SWARM_CONFIG" ]; then msg "🛑  Environment variable ${RED}SWARM_CONFIG$NC is required"; exit 1; fi

# Input validation
APPLICATION_NAME=$(echo $SWARM_CONFIG | jq -r '.application | select (.!=null)')
if [ -z "$APPLICATION_NAME" ]; then msg "🛑  Attribute ${RED}application$NC not set in swarm config"; exit 1; fi

REMOTE_HOST=$(echo $SWARM_CONFIG | jq -r '.remote_host | select (.!=null)')
if [ -z "$REMOTE_HOST" ]; then msg "🛑  Attribute ${RED}remote_host$NC not set in swarm config"; exit 1; fi

REMOTE_USER=$(echo $SWARM_CONFIG | jq -r '.remote_user | select (.!=null)')
if [ -z "$REMOTE_USER" ]; then msg "🛑  Attribute ${RED}remote_user$NC not set in swarm config"; exit 1; fi

REMOTE_PORT=$(echo $SWARM_CONFIG | jq -r '.remote_port | select (.!=null)')
REMOTE_PORT=${REMOTE_PORT:-22}

SYSTEM_NAME=$(echo $SWARM_CONFIG | jq -r '.system | select (.!=null)')
SYSTEM_NAME=${SYSTEM_NAME:-web}

SWARM_NAME=$(echo $SWARM_CONFIG | jq -r '.swarm_name | select (.!=null)')
if [ -z "$SWARM_NAME" ]; then msg "🛑  Attribute ${RED}swarm_name$NC not set in swarm config"; exit 1; fi

# Read YAML file name from swarm configuration and fallback to 'swarm.yml'
SWARM_YAML=$(echo $SWARM_CONFIG | jq -r '.yaml_file | select (.!=null)')
SWARM_YAML=${SWARM_YAML:-swarm.yml}
SWARM_YAML=${2:-$SWARM_YAML}

# ---> Summary
msg ""
msg "App stack:           $HL${WORKING_DIR}/deployment/$SWARM_YAML$NC"
msg "Swarm stack name:    $HL$SWARM_NAME$NC"
msg "Remote manager:      $HL${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PORT}$NC"
msg ""

# Parse version number
msg "ℹ️   Preparing version number"
git fetch
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/protomodule/ops/main/helpers/generate-version.sh)" -- -s version
source version.sh

# Prepare environment variables
CONFIG_DEPLOYMENT_VARS=$(echo $SWARM_CONFIG | jq -r $'.deployment_vars | select (.!=null) | to_entries|map("\(.key)=\(.value|tostring)")|.[]')
if [ ! -z "$CONFIG_DEPLOYMENT_VARS" ]; then
  msg "🔧  Writing config deployment vars to .env file..."
  echo "$CONFIG_DEPLOYMENT_VARS" >> "${WORKING_DIR}/deployment/.env.tmp_swarm_deployment"
fi

if [ -f "${WORKING_DIR}/deployment/.env" ]; then
  msg "🔧  Keeping variables in existing .env file..."
  cp "${WORKING_DIR}/deployment/.env" "${WORKING_DIR}/deployment/.env.tmp_swarm_deployment"
  echo "" >> "${WORKING_DIR}/deployment/.env.tmp_swarm_deployment" # Ensure newline at end of file
else
  rm "${WORKING_DIR}/deployment/.env.tmp_swarm_deployment"
fi

if [ ! -z "$SWARM_DEPLOYMENT_VARS" ]; then
  msg "🔧  Writing external deployment variables to .env file..."
  echo "$SWARM_DEPLOYMENT_VARS" >> "${WORKING_DIR}/deployment/.env.tmp_swarm_deployment"
fi

# Prepare SSH key
echo "📂  Creating temporary folder..."
mkdir -p "${WORKING_DIR}/__keys"
echo "🔑  Writing SSH key to temporary file..."
echo $SWARM_CONFIG | jq -r '.ssh_private_key' > "${WORKING_DIR}/__keys/swarm"

# Run swarm deployment
export DEPLOY_TAG=${DOCKER_TAG:-$LATEST_TAG}
msg "🚀  Deploying version $GREEN$DEPLOY_TAG$NC to swarm..."
msg ""
docker run --rm \
  -v ${WORKING_DIR}/__keys:/keys \
  -v ${WORKING_DIR}/deployment:/deployment \
  -e REPOSITORY \
  -e VERSION \
  -e COMMIT \
  -e SHORT \
  -e BRANCH \
  -e DOCKER_TAG \
  -e LATEST_TAG \
  -e DEPLOY_TAG \
  -e CI_REGISTRY \
  -e CI_REGISTRY_USER \
  -e CI_REGISTRY_PASSWORD \
  -e AWS_ACCESS_KEY_ID \
  -e AWS_SECRET_ACCESS_KEY \
  -e ECR_REGISTRY \
  -e DOCKER_LOGIN_USERNAME \
  -e DOCKER_LOGIN_PASSWORD \
  -e DOCKER_LOGIN_REGISTRY \
  -e INFISICAL_ENABLED=${DEVELOPMENT_INFISICAL_ENABLED} \
  -e INFISICAL_TOKEN=${DEVELOPMENT_INFISICAL_TOKEN} \
  -e INFISICAL_PATH=${DEVELOPMENT_INFISICAL_PATH} \
  -e INFISICAL_API_URL=${INFISICAL_API_URL} \
  -e APPLICATION=${APPLICATION_NAME} \
  -e ENVIRONMENT=${ENVIRONMENT:-unspecified} \
  -e SYSTEM=${SYSTEM_NAME} \
  docker:cli sh -c "
    # Prepare shell
    set -Eeo pipefail

    # Check if stack file exists
    if [ ! -f "/deployment/$SWARM_YAML" ]; then
      echo -e \"🛑  Swarm stack file $RED$SWARM_YAML$NC does not exist\";
      exit 99
    fi

    # Prepare SSH key
    chmod 600 /keys/*;
    eval \`ssh-agent\`;
    ssh-add /keys/swarm;

    # Add remote host to known hosts
    mkdir -p ~/.ssh;
    ssh-keyscan -H -p$REMOTE_PORT $REMOTE_HOST >> ~/.ssh/known_hosts;

    # Run deployment on remote manager
    export DOCKER_HOST=ssh://$REMOTE_USER@$REMOTE_HOST:$REMOTE_PORT;

    # Login to private registry if configured
    ## GitLab CI Docker login
    if [ -z \"\$CI_REGISTRY_USER\" ] || [ -z \"\$CI_REGISTRY_PASSWORD\" ] || [ -z \"\$CI_REGISTRY\" ]; then
      echo \"⏭   Skipping GitLab Docker login (not configured)\";
    else
      echo -e \"🔑  Logging in to ${YELLOW}GitLab Docker registry$NC (\$CI_REGISTRY)\";
      echo \"\$CI_REGISTRY_PASSWORD\" | docker login -u \"\${CI_REGISTRY_USER}\" --password-stdin \${CI_REGISTRY};
    fi

    ## AWS
    if [ -z \"\$AWS_ACCESS_KEY_ID\" ] || [ -z \"\$AWS_SECRET_ACCESS_KEY\" ] || [ -z \"\$ECR_REGISTRY\" ]; then
      echo \"⏭   Skipping AWS ECR login (not configured)\";
    else
      echo -e \"🔑  Logging in to ${YELLOW}AWS ECR$NC\";
      apk add -q aws-cli;
      aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin \$ECR_REGISTRY;
    fi

    ## Generic Docker registry
    if [ -z \"\$DOCKER_LOGIN_USERNAME\" ] || [ -z \"\$DOCKER_LOGIN_PASSWORD\" ] || [ -z \"\$DOCKER_LOGIN_REGISTRY\" ]; then
      echo \"⏭   Skipping additional Docker login (not configured)\";
    else
      echo -e \"🔑  Logging in to ${YELLOW}Docker registry$NC (\$DOCKER_LOGIN_REGISTRY)\";
      echo \"\$DOCKER_LOGIN_PASSWORD\" | docker login -u \"\${DOCKER_LOGIN_USERNAME}\" --password-stdin \${DOCKER_LOGIN_REGISTRY};
    fi

    # Sourcing environment variables
    if [ -f "/deployment/.env.tmp_swarm_deployment" ]; then
      echo -e \"🔧  Validating & sourcing deployment variables from ${HL}.env$NC file...\";
      wget -q https://github.com/ko1nksm/shdotenv/releases/latest/download/shdotenv -O /usr/local/bin/shdotenv
      chmod +x /usr/local/bin/shdotenv

      # Remove duplicates
      less /deployment/.env.tmp_swarm_deployment | tac | awk -F "=" '!a[\$1]++' | tac > /deployment/.env.tmp_swarm_deployment.dedup
      mv /deployment/.env.tmp_swarm_deployment.dedup /deployment/.env.tmp_swarm_deployment

      # Validate env file
      shdotenv -d node --quiet --env /deployment/.env.tmp_swarm_deployment

      # Source variables into shell
      source <(shdotenv -d node --env /deployment/.env.tmp_swarm_deployment)
    fi

    # Run deployment on remote manager
    echo -e \"🐳  Running stack deploy for $GREEN$SWARM_NAME$NC\"
    echo ""
    docker --log-level debug stack deploy --prune --detach=false --resolve-image=always --with-registry-auth -c /deployment/$SWARM_YAML $SWARM_NAME
"

msg ""
msg "🏁  ${OK}Swarm has been updated$NC"
